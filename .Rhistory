return(list(headerRow=headerRow,lines=lines))
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
trimmedLibraryMetricsFiles <- list.files("STAR_hg38_maxMultiHits1_trimmedReads_renamed/zz_estimateLibraryComplexity", pattern="metrics.txt$", full.names=TRUE)
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n")
headerRow <- grep("^## METRICS CLASS", lines)
return(list(headerRow=headerRow,lines=lines))
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n")
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1:headerRow+2),]
return(myTable))
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n")
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1:headerRow+2),]
return(myTable)
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n")
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2),]
return(myTable)
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n")
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2)]
return(myTable)
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n")
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2)]
myTable <- strsplit(myTable, "\t")
return(myTable)
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n")
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2)]
myTable <- strsplit(myTable, "\t")
myTable <- as.data.frame(myTable)
return(myTable)
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
class(readLibraryMetrics(trimmedLibraryMetricsFiles[1]))
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n")
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2)]
myTable <- strsplit(myTable, "\t")
#myCounts <- myTable[2]
return(myTable)
}
class(readLibraryMetrics(trimmedLibraryMetricsFiles[1]))
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n")
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2)]
myTable <- strsplit(myTable, "\t")
myCounts <- myTable[[2]]
names(myCounts) <- myTable[[1]]
return(myCounts)
}
class(readLibraryMetrics(trimmedLibraryMetricsFiles[1]))
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n")
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2)]
myTable <- strsplit(myTable, "\t")
myCounts <- myTable[[2]]
names(myCounts) <- myTable[[1]]
columnsToFix <- setdiff(names(myCounts), "LIBRARY")
for (thisCol in columnsToFix) { myCounts[thisCol] <- as.numeric(thisCol) }
return(myCounts)
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n")
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2)]
myTable <- strsplit(myTable, "\t")
myCounts <- myTable[[2]]
names(myCounts) <- myTable[[1]]
columnsToFix <- setdiff(names(myCounts), "LIBRARY")
for (thisCol in columnsToFix) { myCounts[thisCol] <- as.numeric(myCounts[thisCol]) }
return(myCounts)
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n", quiet=TRUE)
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2)]
myTable <- strsplit(myTable, "\t")
myCounts <- myTable[[2]]
names(myCounts) <- myTable[[1]]
columnsToFix <- setdiff(names(myCounts), "LIBRARY")
for (thisCol in columnsToFix) { myCounts[thisCol] <- as.numeric(myCounts[thisCol]) }
return(myCounts)
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n", quiet=TRUE)
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2)]
myTable <- strsplit(myTable, "\t")
myCounts <- myTable[[2]]
names(myCounts) <- myTable[[1]]
columnsToFix <- setdiff(names(myCounts), "LIBRARY")
for (thisCol in columnsToFix) {
cat("fixing column",thisCol,"\n")
myCounts[thisCol] <- as.numeric(myCounts[thisCol])
}
return(myCounts)
}
readLibraryMetrics(trimmedLibraryMetricsFiles[1])
temp <- readLibraryMetrics(trimmedLibraryMetricsFiles[1])
class(temp)
c(23, "A")
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n", quiet=TRUE)
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2)]
myTable <- strsplit(myTable, "\t")
myTable <- as.data.frame(myTable)
#myCounts <- myTable[[2]]
#names(myCounts) <- myTable[[1]]
#columnsToFix <- setdiff(names(myCounts), "LIBRARY")
#for (thisCol in columnsToFix) {
#  cat("fixing column",thisCol,"\n")
#  myCounts[thisCol] <- as.numeric(myCounts[thisCol])
#}
return(myTable)
}
temp <- readLibraryMetrics(trimmedLibraryMetricsFiles[1])
temp
readLibraryMetrics <- function(myFile) {
if(!file.exists(myFile)) {
stop("\n\nERROR - file ",myFile," does not exist\n\n")
}
lines <- scan(myFile, what="character", sep="\n", quiet=TRUE)
headerRow <- grep("^## METRICS CLASS", lines)
myTable <- lines[(headerRow+1):(headerRow+2)]
myTable <- strsplit(myTable, "\t")
myTable <- as.data.frame(myTable)
colnames(myTable) <- c("type", "count")
#myCounts <- myTable[[2]]
#names(myCounts) <- myTable[[1]]
#columnsToFix <- setdiff(names(myCounts), "LIBRARY")
#for (thisCol in columnsToFix) {
#  cat("fixing column",thisCol,"\n")
#  myCounts[thisCol] <- as.numeric(myCounts[thisCol])
#}
return(myTable)
}
temp <- readLibraryMetrics(trimmedLibraryMetricsFiles[1])
temp
class(temp[,2])
trimmedLibraryMetricsFiles <- lapply(trimmedLibraryMetricsFiles, readLibraryMetrics)
trimmedLibraryMetrics <- trimmedLibraryMetricsFiles
trimmedLibraryMetricsFiles <- list.files("STAR_hg38_maxMultiHits1_trimmedReads_renamed/zz_estimateLibraryComplexity", pattern="metrics.txt$", full.names=TRUE)
head(trimmedLibraryMetricsFiles)
head(sapply(strsplit(trimmedLibraryMetricsFiles, "/"), "[[", 3))
head(gsub(".est_lib_complex_metrics.txt","",
sapply(strsplit(trimmedLibraryMetricsFiles, "/"), "[[", 3) ))
names(trimmedLibraryMetrics) <- gsub(".est_lib_complex_metrics.txt","",
sapply(strsplit(trimmedLibraryMetricsFiles, "/"), "[[", 3) )
trimmedLibraryMetrics[[1]]
85909 / 441540
names(trimmedLibraryMetrics)[1]
trimmedProportionDuplicates <- sapply(trimmedLibraryMetrics, function(x){
as.numeric(x[which(x[,"type"]=="PERCENT_DUPLICATION"),"count"])
})
head(trimmedProportionDuplicates)
table(names(trimmedProportionDuplicates) %in% dat[,"JYsampleName"]))
table(names(trimmedProportionDuplicates) %in% dat[,"JYsampleName"])
dat[match( names(trimmedProportionDuplicates), dat[,"JYsampleName"]),"trimmedPercentDuplicates"] <-100*trimmedProportionDuplicates
head(dat)
summmary(dat[,"trimmedPercentDuplicates"])
summary(dat[,"trimmedPercentDuplicates"])
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SRAdb")
library("SRAdb")
## a small demo file:
sqlfile <- file.path(system.file('extdata', package='SRAdb'), 'SRAmetadb_demo.sqlite')
###################################################
### code chunk number 4: SRAdb.Rnw:73-74
###################################################
file.info(sqlfile)
sra_tables <- dbListTables(sra_con)
sra_tables
## connect to the database
sra_con <- dbConnect(SQLite(),sqlfile)
sra_tables <- dbListTables(sra_con)
sra_tables
###################################################
### code chunk number 7: SRAdb.Rnw:96-97
###################################################
dbListFields(sra_con,"study")
dbGetQuery(sra_con,'PRAGMA TABLE_INFO(study)')
colDesc <- colDescriptions(sra_con=sra_con)[1:5,]
colDesc[, 1:4]
rs <- dbGetQuery(sra_con,"select * from study limit 3")
rs[, 1:3]
rs <- dbGetQuery(sra_con, paste( "select study_accession,
study_title from study where",
"study_description like 'Transcriptome%'",sep=" "))
rs[1:3,]
rs <- dbGetQuery(sra_con, paste( "select study_accession,study_title,study_description from study where",
"study_description like 'Transcriptome%'",sep=" "))
rs[1:3,]
class(rs)
dim(rs)
rs[,3]
rs <- dbGetQuery(sra_con,"select * from study limit 3")
rs[, 1:3]
rs
dim(rs)
sra_tables
sra_tables[c(2,4,5,11,12)]
getTableCounts <- function(tableName,conn) {
sql <- sprintf("select count(*) from %s",tableName)
return(dbGetQuery(conn,sql)[1,1])
}
do.call(rbind,sapply(sra_tables[c(2,4,5,11,12)],
getTableCounts, sra_con, simplify=FALSE))
rs <- dbGetQuery(sra_con, paste( "SELECT study_type AS StudyType,
count( * ) AS Number FROM `study` GROUP BY study_type order
by Number DESC ", sep=""))
rs
rs <- dbGetQuery(sra_con, paste( "SELECT study_type AS StudyType,
count( * ) AS Number FROM `study`
GROUP BY study_type
order by Number DESC ", sep=""))
rs
rs <- dbGetQuery(sra_con, paste( "SELECT instrument_model AS
'Instrument Model', count( * ) AS Experiments FROM `experiment`
GROUP BY instrument_model order by Experiments DESC", sep=""))
rs
rs <- dbGetQuery(sra_con, paste( "SELECT library_strategy AS
'Library Strategy', count( * ) AS Runs FROM `experiment`
GROUP BY library_strategy order by Runs DESC", sep=""))
rs
rs <- dbGetQuery(sra_con, paste( "SELECT library_strategy AS 'Library Strategy',
count( * ) AS Runs FROM `experiment`
GROUP BY library_strategy
order by Runs DESC", sep=""))
rs
conversion <- sraConvert( c('SRP001007','SRP000931'), sra_con = sra_con )
conversion[1:3,]
class(conversion)
dim(conversion)
conversion
?sraConvert
sraConvert( "SRS003458", sra_con = sra_con )
apply(conversion, 2, unique)
rs <- getSRA( search_terms = "breast cancer",
out_types = c('run','study'), sra_con )
dim(rs)
head(rs)
rs <- getSRA( search_terms = "breast cancer",
out_types = c("submission", "study", "sample",
"experiment", "run"), sra_con )
dim(rs)
length(unique(rs[,"run"]))
length(unique(rs[,"study"]))
length(unique(rs[,"study_abstract"]))
apply( rs[, c('run','sample','study_type','platform',
'instrument_model')], 2, function(x)
{length(unique(x))} )
rs <- getSRA (search_terms ='"breast cancer"',
out_types=c('run','study'), sra_con)
dim(rs)
rs <- getSRA( search_terms ='MCF7 OR "MCF-7"',
out_types = c('sample'), sra_con )
dim(rs)
rs <- getSRA( search_terms ='submission_center: GEO',
out_types = c('submission'), sra_con )
dim(rs)
rs <- getSRA( search_terms ='Carcino*',
out_types = c('study'), sra_con=sra_con )
dim(rs)
rs
rs <- getSRA( search_terms ='submission_center: GEO',
out_types = c('submission'), sra_con )
dim(rs)
rs
rs <- listSRAfile( c("SRX000122"), sra_con, fileType = 'sra' )
class(rs)
rs
rs = getSRAinfo ( c("SRX000122"), sra_con, sraType = "sra" )
rs <- getSRA (search_terms ='"breast cancer"',
out_types=c('run','study'), sra_con)
dim(rs)
## this gives accessions of all types PLUS the ftp address for the SRA file
rs <- listSRAfile( c("SRX000122"), sra_con, fileType = 'sra' )
rs
getSRAinfo ( c("SRX000122"), sra_con, sraType = "sra" )
###################################################
### code chunk number 25: SRAdb.Rnw:245-246 (eval = FALSE)
###################################################
## getSRAfile( c("SRR000648","SRR000657"), sra_con, fileType = 'sra' )
getSRAfile( "SRR000648", sra_con, fileType = 'sra' )
dbDisconnect(sra_con)
sqlfile <- "/Volumes/malik_h/grp/public_databases/NCBI/SRA/for_bioconductor_SRAdb_package/SRAmetadb_2021_April13.sqlite"
sra_con <- dbConnect(SQLite(),sqlfile)
## get all accessions related to 1000 genomes project
rs <- getSRA( search_terms = '"1000 Genomes Project"', sra_con=sra_con, acc_only=TRUE)
dim(rs)
head(rs)
q()
########### functions for mating infinite size population
##### mendelTable: set up a table that shows offspring genotype frequencies under Mendelian inheritance, for every possible pairwise combination of parent genotypes:
genotypePossibilities <- c("WThom", "het", "KOhom")
mendelTable <- data.frame(femaleID=rep(genotypePossibilities, each=3),
maleID=rep(genotypePossibilities, 3))
nextGenColumnNames <- paste("nextGen_",genotypePossibilities, sep="")
mendelTable[,nextGenColumnNames] <- NA
# mother is WThom
mendelTable[which(mendelTable[,"femaleID"]=="WThom" & mendelTable[,"maleID"]=="WThom"),
nextGenColumnNames] <- c(1,0,0)
mendelTable[which(mendelTable[,"femaleID"]=="WThom" & mendelTable[,"maleID"]=="het"),
nextGenColumnNames] <- c(0.5,0.5,0)
mendelTable[which(mendelTable[,"femaleID"]=="WThom" & mendelTable[,"maleID"]=="KOhom"),
nextGenColumnNames] <- c(0,1,0)
# mother is het
mendelTable[which(mendelTable[,"femaleID"]=="het" & mendelTable[,"maleID"]=="WThom"),
nextGenColumnNames] <- c(0.5,0.5,0)
mendelTable[which(mendelTable[,"femaleID"]=="het" & mendelTable[,"maleID"]=="het"),
nextGenColumnNames] <- c(0.25,0.5,0.25)
mendelTable[which(mendelTable[,"femaleID"]=="het" & mendelTable[,"maleID"]=="KOhom"),
nextGenColumnNames] <- c(0,0.5,0.5)
# mother is KOhom
mendelTable[which(mendelTable[,"femaleID"]=="KOhom" & mendelTable[,"maleID"]=="WThom"),
nextGenColumnNames] <- c(0,1,0)
mendelTable[which(mendelTable[,"femaleID"]=="KOhom" & mendelTable[,"maleID"]=="het"),
nextGenColumnNames] <- c(0,0.5,0.5)
mendelTable[which(mendelTable[,"femaleID"]=="KOhom" & mendelTable[,"maleID"]=="KOhom"),
nextGenColumnNames] <- c(0,0,1)
rm(nextGenColumnNames, genotypePossibilities)
mendelTable
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
## set up with our initial genotype freqs (they are imbalanced between males and females, which constrains the genotype frequencies in the first 2 generations)
genotypeFreqsInitial <- list(female=list(WThom=0, het=0, KOhom=1 ),
male=list(WThom=0.5, het=0, KOhom=0.5) )
verifyGenotypeFreqList(genotypeFreqsInitial)
genotypePossibilities
names(genotypeFreqsInitial)
names(genotypeFreqsInitial[[1]])
genotypePossibilities %in% names(genotypeFreqsInitial[["female"]])
sum( genotypePossibilities %in% names(genotypeFreqsInitial[["female"]]))
sum( genotypePossibilities %in% names(genotypeFreqsInitial[["female"]])) != 3
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
verifyGenotypeFreqList(genotypeFreqsInitial)
genotypePossibilities
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
verifyGenotypeFreqList(genotypeFreqsInitial)
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
genotypeFreqsInitialBad <- list(female=list(WThom=0, het=0, KOhom=1, fake=2 ),
male=list(WThom=0.5, het=0, KOhom=0.5) )
verifyGenotypeFreqList(genotypeFreqsInitialBad)
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
verifyGenotypeFreqList(genotypeFreqsInitial)
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
verifyGenotypeFreqList(genotypeFreqsInitial)
verifyGenotypeFreqList(genotypeFreqsInitialBad)
genotypeFreqsInitialBad <- list(female=list(WThom=0, het=0, KOhom=1.5 ),
male=list(WThom=0.5, het=0, KOhom=0.5) )
verifyGenotypeFreqList(genotypeFreqsInitialBad)
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
mateInfiniteSizePopulation( genotypeFreqsInitial)
mateInfiniteSizePopulation( genotypeFreqsInitialBad)
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
mateInfiniteSizePopulation( genotypeFreqsInitialBad)
mateInfiniteSizePopulation( genotypeFreqsInitial)
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
mateInfiniteSizePopulation( genotypeFreqsInitial)
mateInfiniteSizePopulation( genotypeFreqsInitialBad)
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
source('/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_populationCage_functions.R')
q()
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggpubr)
library(scales)
library(grid)
library(gridExtra)
rm(list=ls())
setwd("/Volumes/malik_h/user/jayoung/forOtherPeople/forCourtney/Arp53D_population_cage_experiments/Arp53D_popCage")
load("Rdata_files/Arp53D_populationCage_modellingOutput.Rdata")
source("Arp53D_populationCage_functions.R")
#### get text labels that show the parameters of the best models
getModelCoefficientsAsLabel_v2 <- function(modelResults) {
paste("best model:",
"\n  Fwt = ",modelResults[1,"selectionWThom"],
"\n Fhet = ",modelResults[1,"selectionHet"],
"\n  Fko = ",modelResults[1,"selectionKOhom"],
"\n  MAE = ",round(modelResults[1,"fitScore"],digits=3), sep="")
}
bestModelLabels_allRegimesFitTypes_v2 <- lapply(bestModelsAllRegimesSeveralFitTypes, function(x) {
lapply(x, getModelCoefficientsAsLabel_v2)
})
bestModelLabels_allRegimesFitTypes_v2_df <- lapply(names(bestModelLabels_allRegimesFitTypes_v2), function(thisSelectionRegime) {
theseLabels <- bestModelLabels_allRegimesFitTypes_v2[[thisSelectionRegime]]
theseLabels_df <- data.frame(fitType=names(theseLabels), label=unlist(theseLabels,use.names = FALSE))
theseLabels_df[,"selectionRegime"] <- thisSelectionRegime
return(theseLabels_df)
})
bestModelLabels_allRegimesFitTypes_v2_df <- do.call("rbind",bestModelLabels_allRegimesFitTypes_v2_df) %>%
select(selectionRegime,fitType,label) %>% # reorder columns
mutate(generation=0,WThom=0.85) %>% # add columns that will specify label position on plots
mutate(selectionRegime=factor(selectionRegime, levels=allSelectionRegimes))
facetNameReplacements <- c(
"het_equalsWThom"  = "Fhet = Fwt",
"het_intermediate" = "Fhet = intermediate",
"het_equalsKOhom"  = "Fhet = Fko"
)
plotFitnessModelling_allRegimes_justMAE <- infinitePopulation_multipleSelectiveRegimesFineGrain %>%
filter( ( (selectionKOhom*1000) %% 25)==0 ) %>%  ## this is so I don't plot every single increment of 0.001 for selectionKOhom (instead, I plot increments of 0.025).## I thought I could use modulo to filter for increments, but there is something weird about floating point arithmetic that means it doesn't work.  See https://stackoverflow.com/questions/13614749/modulus-bug-in-r
# e.g. 1 %% 0.2  should be 0, but on my Mac R thinks it is 0.2
# so instead I will multiply by 1000 first, and then take the modulo
ggplot(aes(x=generation, y=WThom)) +
geom_line(aes(group=selectionKOhom, colour=selectionKOhom)) +
facet_grid(cols=vars(selectionRegime), labeller=labeller(selectionRegime=facetNameReplacements)) +
theme_classic() +
coord_cartesian(xlim=c(0,30)) +
scale_colour_distiller(palette = "Spectral", direction=1,
guide = guide_colourbar(title="Fko")) +
labs(x="Generation", y="Freq WT homozygotes") +
## the gray line showing best model
geom_line(data=(bestModelsAllRegimesSeveralFitTypesCombined %>% filter(fitType=="meanAbsErr")),
aes(x=generation,y=WThom), color="gray",lwd=2) +
## the REAL data:
geom_point(data=arp53d, aes(x=generation,y=freqWThom)) +
## old - I was including means at each generation
#stat_summary(data=arp53d, aes(x=generation,y=freqWThom), fun="mean",
#             geom="point", shape=5, size=3,
#             colour = "black", fill="white") +
## dashed lines for the REAL data
geom_line(data=arp53d, aes(x=generation,y=freqWThom, group=bottle), lty=2) +
## gray boxes showing coefficients for best models
geom_label(data=(bestModelLabels_allRegimesFitTypes_v2_df %>% filter(fitType=="meanAbsErr")),
aes(label=gsub("fitScore","MAE",label)),
colour="gray60", hjust = 0, #vjust = 1, label.padding=unit(0.25, "lines"),
size=1.75, family = "mono") +
theme(panel.spacing = unit(2, "lines"),
strip.background = element_blank(),
strip.text.x = element_text(size = 12)
)
plotFitnessModelling_allRegimes_justMAE
q()
